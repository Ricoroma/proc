from random import randint

from aiogram import Router, F
from aiogram.enums import ContentType
from aiogram.utils.formatting import Text
from aiogram.filters import Command
from sqlalchemy.orm import Session

from tgbot.data import loader
from tgbot.data.loader import bot, links
from aiogram.types import Message, CallbackQuery, FSInputFile, InputMediaPhoto
from aiogram.fsm.context import FSMContext

from tgbot.keyboards.admin_keyboards import *
from tgbot.services.database import User, Trader, Trade, Settings
from tgbot.filters.is_adm import IsAdmin
from tgbot.utils.curs import get_course
from tgbot.utils.other import format_trades
from tgbot.utils.states import TraderState, AdminState

router = Router()
router.message.filter(IsAdmin())
router.callback_query.filter(IsAdmin())

statuses = {}


@router.callback_query(F.data == "main_admin")
@router.message(Command("start"))
async def admin_start_handler(update: Message | CallbackQuery):
    if isinstance(update, CallbackQuery):
        await update.message.delete()
        func = update.message.answer
    else:
        func = update.answer
    await func('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main_admin_kb())


@router.callback_query(F.data == 'admin_traders')
@router.message(F.text == '–¢—Ä–µ–π–¥–µ—Ä—ã üë§')
async def admin_traders_handler(update: Message | CallbackQuery, db_session: Session):
    traders = [i.user_id for i in db_session.query(Trader).all()]
    if isinstance(update, CallbackQuery):
        func = update.message.edit_text
    else:
        func = update.answer

    text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–π–¥–µ—Ä–∞:'

    await func(text, reply_markup=choose_trader_kb(traders))


@router.callback_query(F.data.startswith('trader:'))
async def admin_trader_handler(call: CallbackQuery, db_session: Session, state: FSMContext):
    trader_id = int(call.data.split(':')[1])
    trader: Trader = db_session.query(Trader).get(trader_id)
    text = f'–¢—Ä–µ–π–¥–µ—Ä {trader_id}\n' \
           f'–ë–∞–ª–∞–Ω—Å: {trader.balance} BTC\n' \
           f'–ö–æ—à–µ–ª–µ–∫: {trader.wallet or "–ù–µ–∫–æ—Ç–æ—Ä—ã–π –∫–æ—à–µ–ª–µ–∫"}\n' \
           f'–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: {trader.account_id or "–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω"}\n'

    await call.message.edit_text(text, reply_markup=admin_trader_menu(trader.is_active))
    await state.update_data(trader_id=trader_id)


@router.callback_query(F.data == 'admin_trader_status')
async def admin_trader_status_handler(call: CallbackQuery, state: FSMContext, db_session: Session):
    data = await state.get_data()
    trader_id = data.get('trader_id')
    trader: Trader = db_session.query(Trader).get(trader_id)

    await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:', reply_markup=admin_trader_status_kb(trader.is_active, trader_id))


@router.callback_query(F.data.startswith('trader_status:'))
async def admin_trader_status_change_handler(call: CallbackQuery, state: FSMContext, db_session: Session):
    status = int(call.data.split(':')[1])
    data = await state.get_data()
    trader_id = data.get('trader_id')

    trader: Trader = db_session.query(Trader).get(trader_id)
    trader.is_active = status
    db_session.commit()

    await call.message.edit_text('–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω', reply_markup=admin_management_kb(status, trader_id))
    await bot.send_message(trader_id, f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {"–≤–∫–ª—é—á–∏–ª" if status else "–≤—ã–∫–ª—é—á–∏–ª"} –≤–∞–º —Ç–æ—Ä–≥–æ–≤–ª—é')


@router.callback_query(F.data == 'admin_trader_requisites')
async def admin_trader_requisites_handler(call: CallbackQuery, state: FSMContext, db_session: Session):
    data = await state.get_data()
    trader_id = data.get('trader_id')

    trader = db_session.query(Trader).get(trader_id)
    requisites = trader.requisites.split('|')

    await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
                                 reply_markup=admin_requisites_kb(requisites, trader_id))


@router.callback_query(F.data.startswith('del_requisite:'))
async def admin_trader_requisites_del_handler(call: CallbackQuery, db_session: Session, state: FSMContext):
    requisite = call.data.split(':')[1]
    data = await state.get_data()
    trader_id = data.get('trader_id')

    trader = db_session.query(Trader).get(trader_id)
    requisites = trader.requisites.split('|')
    requisites.remove(requisite)
    trader.requisites = '|'.join(requisites)
    db_session.commit()

    await call.message.edit_text('–†–µ–∫–≤–∏–∑–∏—Ç —É–¥–∞–ª–µ–Ω', reply_markup=admin_requisites_kb(requisites, trader_id))


@router.callback_query(F.data == 'admin_trader_management')
async def admin_trader_management_handler(call: CallbackQuery, state: FSMContext, db_session: Session):
    data = await state.get_data()
    trader_id = data.get('trader_id')

    trader = db_session.query(Trader).get(trader_id)

    await call.message.edit_text('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', reply_markup=admin_management_kb(trader.is_active, trader_id))


@router.callback_query(F.data == 'trader_change_balance')
async def admin_trader_change_balance_handler(call: CallbackQuery, state: FSMContext):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å —Ç—Ä–µ–π–¥–µ—Ä–∞', reply_markup=cancel_change_kb())
    await state.set_state(AdminState.change_balance)
    await call.answer()


@router.message(AdminState.change_balance)
async def admin_trader_change_balance_handler(message: Message, state: FSMContext, db_session: Session):
    data = await state.get_data()
    trader_id = int(data.get('trader_id'))

    if message.text.replace(',', '', 1).replace('.', '', 1).isdigit():
        trader = db_session.query(Trader).get(trader_id)
        old_balance = trader.balance
        trader.balance = float(message.text)
        db_session.commit()

        await message.answer('–ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–µ–Ω ‚úÖ')

        text = f'–¢—Ä–µ–π–¥–µ—Ä {trader_id}\n' \
               f'–ë–∞–ª–∞–Ω—Å: {trader.balance} BTC\n' \
               f'–ö–æ—à–µ–ª–µ–∫: {trader.wallet or "–ù–µ–∫–æ—Ç–æ—Ä—ã–π –∫–æ—à–µ–ª–µ–∫"}\n' \
               f'–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: {trader.account_id or "–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω"}\n'

        await message.answer(text, reply_markup=admin_trader_menu(trader.is_active))

        await bot.send_message(trader_id, f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª –≤–∞—à –±–∞–ª–∞–Ω—Å —Å {old_balance} –Ω–∞ {trader.balance} BTC')

        await state.set_state(None)
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º "." –∏–ª–∏ ","')


@router.callback_query(F.data == 'create_link')
async def create_link_handler(call: CallbackQuery, db_session: Session):
    if db_session.query(Trader).first():
        await call.answer('–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤')
        return

    code = randint(10 ** 7, 10 ** 8)
    links.append(code)
    traders = [i.user_id for i in db_session.query(Trader).all()]
    await call.message.edit_text(
        f'–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Ç—Ä–µ–π–¥–µ—Ä–∞: https://t.me/{(await bot.me()).username}?start={code}',
        reply_markup=choose_trader_kb(traders)
    )


@router.message(F.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà')
@router.callback_query(F.data == 'statistics')
async def statistics_handler(update: Message | CallbackQuery, db_session: Session):
    if isinstance(update, CallbackQuery):
        func = update.message.edit_text
    else:
        func = update.answer

    traders = [i.user_id for i in db_session.query(Trader).all()]
    trades = db_session.query(Trade).all()

    await func(format_trades(trades), reply_markup=statistics_kb(traders))


@router.callback_query(F.data.startswith('statistics:'))
async def trader_statistics_handler(call: CallbackQuery, db_session: Session):
    trader_id = int(call.data.split(':')[1])
    trades = db_session.query(Trade).filter(Trade.trader_id == trader_id).all()

    text = f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞ {trader_id}\n' + format_trades(trades)

    await call.message.edit_text(text, reply_markup=trader_statistics_kb())


@router.callback_query(F.data.startswith('refill_confirmed'))
async def refill_confirmed_handler(call: CallbackQuery, db_session: Session):
    trader_id, amount = call.data.split(':')[1:]
    trader_id = int(trader_id)
    amount = float(amount)

    trader: Trader = db_session.query(Trader).get(trader_id)
    trader.balance += amount
    db_session.commit()

    await call.message.edit_text(f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–µ—Ä—É {trader_id} –Ω–∞ {amount} BTC –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ')

    await bot.send_message(trader_id, f'–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} BTC')


@router.callback_query(F.data == 'no_button')
async def no_button_handler(call: CallbackQuery):
    await call.answer('–î–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —Ç—Ä–µ–π–¥–µ—Ä—É –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', show_alert=True)


@router.message(F.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è')
@router.callback_query(F.data == 'settings')
async def settings_handler(update: Message | CallbackQuery, state: FSMContext, db_session: Session):
    await state.set_state(None)

    if isinstance(update, CallbackQuery):
        func = update.message.edit_text
    else:
        func = update.answer

    settings = db_session.query(Settings).first()

    await func(f'–¢–µ–∫—É—â–∏–π API-–∫–ª—é—á: {settings.api_key}\n'
               f'–¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n<code>{settings.refill_address}</code>', reply_markup=settings_kb())


@router.callback_query(F.data.startswith('change:'))
async def change_handler(call: CallbackQuery, state: FSMContext):
    await state.set_state(AdminState.settings_change)

    action = call.data.split(':')[1]
    await state.update_data(action=action)

    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', reply_markup=cancel_change_kb())
    await call.answer()


@router.message(AdminState.settings_change)
async def change_value_handler(message: Message, state: FSMContext, db_session: Session):
    data = await state.get_data()
    action = data.get('action')

    if action == 'api_key':
        db_session.query(Settings).update({Settings.api_key: message.text})
    elif action == 'refill_address':
        db_session.query(Settings).update({Settings.refill_address: message.text})

    db_session.commit()

    await message.answer('–ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ ‚úÖ')
    await settings_handler(message, state, db_session)


@router.callback_query(F.data == 'cancel_change')
async def cancel_change_handler(call: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    await call.answer('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå')
    await call.message.delete()


@router.callback_query(F.data == 'trader_delete')
async def delete_trader_handler(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    trader_id = int(data.get('trader_id'))

    await call.message.edit_text(f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–µ—Ä–∞ {trader_id}?', reply_markup=trader_delete_confirm_kb())


@router.callback_query(F.data == 'trader_delete_confirm')
async def trader_delete_confirm_handler(call: CallbackQuery, state: FSMContext, db_session: Session):
    data = await state.get_data()
    trader_id = int(data.get('trader_id'))

    db_session.query(Trader).filter(Trader.user_id == trader_id).delete()
    traders = [i.user_id for i in db_session.query(Trader).all()]
    await call.message.edit_text(
         f'–¢—Ä–µ–π–¥–µ—Ä {trader_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤. –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞',
        reply_markup=choose_trader_kb(traders)
    )


@router.callback_query(F.data == 'add_account')
async def add_account_handler(call: CallbackQuery, state: FSMContext):
    await state.set_state(AdminState.add_account)
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ ID –∞–∫–∫–∞—É–Ω—Ç–∞', reply_markup=cancel_change_kb())
    await call.answer()


@router.message(AdminState.add_account)
async def add_account_handler(message: Message, state: FSMContext, db_session: Session):
    data = await state.get_data()
    trader_id = int(data.get('trader_id'))

    trader = db_session.query(Trader).get(trader_id)
    trader.account_id = message.text
    db_session.commit()

    await message.answer('–ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω ‚úÖ')
    text = f'–¢—Ä–µ–π–¥–µ—Ä {trader_id}\n' \
           f'–ë–∞–ª–∞–Ω—Å: {trader.balance} BTC\n' \
           f'–ö–æ—à–µ–ª–µ–∫: {trader.wallet or "–ù–µ–∫–æ—Ç–æ—Ä—ã–π –∫–æ—à–µ–ª–µ–∫"}\n' \
           f'–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: {trader.account_id or "–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω"}\n'

    await message.answer(text, reply_markup=admin_trader_menu(trader.is_active))

    await state.set_state(None)
